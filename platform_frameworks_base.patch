From 7d9e79d0f42a92e1486302a30d9ffa53f219d3eb Mon Sep 17 00:00:00 2001
From: danielzhang130 <danielzhang130@gmail.com>
Date: Mon, 1 Aug 2022 14:14:11 -0400
Subject: [PATCH 1/2] Show entire battery usage history in settings app

Signed-off-by: danielzhang130 <danielzhang130@gmail.com>
Change-Id: I138102c7a866a7aef77f9e3573061e19140e44b1
---
 .../internal/os/BatteryStatsHistory.java      | 19 ++++++++++++++++---
 .../os/BatteryUsageStatsProvider.java         | 11 +++++------
 2 files changed, 21 insertions(+), 9 deletions(-)

diff --git a/core/java/com/android/internal/os/BatteryStatsHistory.java b/core/java/com/android/internal/os/BatteryStatsHistory.java
index b0fce8f18..3eb8cc41a 100644
--- a/core/java/com/android/internal/os/BatteryStatsHistory.java
+++ b/core/java/com/android/internal/os/BatteryStatsHistory.java
@@ -153,12 +153,25 @@ public class BatteryStatsHistory {
     /**
      * Used when BatteryStatsImpl object is created from deserialization of a parcel,
      * such as Settings app or checkin file.
-     * @param historyBuffer the history buffer
+     * @param historyParcel the history buffer
      */
-    public BatteryStatsHistory(Parcel historyBuffer) {
+    public BatteryStatsHistory(Parcel historyParcel) {
         mStats = null;
         mHistoryDir = null;
-        mHistoryBuffer = historyBuffer;
+
+        Parcel copy = Parcel.obtain();
+        copy.appendFrom(historyParcel, 0, historyParcel.dataSize());
+
+        copy.setDataPosition(copy.dataSize() - 4);
+        int size = copy.readInt();
+        copy.setDataPosition(size);
+
+        readFromParcel(copy);
+
+        copy.setDataSize(size);
+
+        mHistoryBuffer = copy;
+        mHistoryBuffer.setDataPosition(0);
     }
 
     public File getHistoryDirectory() {
diff --git a/core/java/com/android/internal/os/BatteryUsageStatsProvider.java b/core/java/com/android/internal/os/BatteryUsageStatsProvider.java
index 09e409bd9..e50ec3af2 100644
--- a/core/java/com/android/internal/os/BatteryUsageStatsProvider.java
+++ b/core/java/com/android/internal/os/BatteryUsageStatsProvider.java
@@ -16,6 +16,7 @@
 
 package com.android.internal.os;
 
+import android.os.Parcel;
 import android.content.Context;
 import android.hardware.SensorManager;
 import android.os.BatteryConsumer;
@@ -219,17 +220,15 @@ public class BatteryUsageStatsProvider {
 
             BatteryStatsImpl batteryStatsImpl = (BatteryStatsImpl) mStats;
 
-            // Make a copy of battery history to avoid concurrent modification.
             Parcel historyBuffer = Parcel.obtain();
             historyBuffer.appendFrom(batteryStatsImpl.mHistoryBuffer, 0,
                     batteryStatsImpl.mHistoryBuffer.dataSize());
+            int originalSize = historyBuffer.dataSize();
 
-            final File systemDir =
-                    batteryStatsImpl.mBatteryStatsHistory.getHistoryDirectory().getParentFile();
-            final BatteryStatsHistory batteryStatsHistory =
-                    new BatteryStatsHistory(batteryStatsImpl, systemDir, historyBuffer);
+            batteryStatsImpl.mBatteryStatsHistory.writeToParcel(historyBuffer);
+            historyBuffer.writeInt(originalSize);
 
-            batteryUsageStatsBuilder.setBatteryHistory(batteryStatsHistory);
+            batteryUsageStatsBuilder.setBatteryHistory(new BatteryStatsHistory(historyBuffer));
         }
 
         BatteryUsageStats stats = batteryUsageStatsBuilder.build();
-- 
2.34.1


From 193d4bd32dc61ac027be895e6c5b73de5859d06e Mon Sep 17 00:00:00 2001
From: Daniel Zhang <danielzhang130@gmail.com>
Date: Fri, 18 Nov 2022 22:06:22 -0500
Subject: [PATCH 2/2] copy safetynet hooks from ProtonAOSP

Change-Id: I7d1c52a5937a4fef9bbec8ab5b94fe41a2554ae0
Signed-off-by: Daniel Zhang <danielzhang130@gmail.com>
---
 core/java/android/app/Instrumentation.java    |  4 +
 .../internal/gmscompat/AttestationHooks.java  | 92 +++++++++++++++++++
 2 files changed, 96 insertions(+)
 create mode 100644 core/java/com/android/internal/gmscompat/AttestationHooks.java

diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java
index 8984c4292..58258acae 100644
--- a/core/java/android/app/Instrumentation.java
+++ b/core/java/android/app/Instrumentation.java
@@ -57,6 +57,8 @@ import android.view.WindowManagerGlobal;
 
 import com.android.internal.content.ReferrerIntent;
 
+import com.android.internal.gmscompat.AttestationHooks;
+
 import java.io.File;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -1231,6 +1233,7 @@ public class Instrumentation {
         Application app = getFactory(context.getPackageName())
                 .instantiateApplication(cl, className);
         app.attach(context);
+        AttestationHooks.initApplicationBeforeOnCreate(app);
         return app;
     }
     
@@ -1248,6 +1251,7 @@ public class Instrumentation {
             ClassNotFoundException {
         Application app = (Application)clazz.newInstance();
         app.attach(context);
+        AttestationHooks.initApplicationBeforeOnCreate(app);
         return app;
     }
 
diff --git a/core/java/com/android/internal/gmscompat/AttestationHooks.java b/core/java/com/android/internal/gmscompat/AttestationHooks.java
new file mode 100644
index 000000000..71d865f62
--- /dev/null
+++ b/core/java/com/android/internal/gmscompat/AttestationHooks.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2021 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.gmscompat;
+
+import android.app.Application;
+import android.os.Build;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+
+/** @hide */
+/**
+ * Copied from ProtonAosp
+ */
+public final class AttestationHooks {
+    private static final String TAG = "GmsCompat/Attestation";
+
+    private static final String PROCESS_UNSTABLE = "com.google.android.gms.unstable";
+
+    private static final String PRODUCT_STOCK_FINGERPRINT =
+            SystemProperties.get("ro.build.stock_fingerprint");
+
+    private static final String PACKAGE_GMS_CORE = "com.google.android.gms";
+
+    private static volatile boolean sIsGms = false;
+
+    private AttestationHooks() { }
+
+    private static void setBuildField(String key, String value) {
+        try {
+            // Unlock
+            Field field = Build.class.getDeclaredField(key);
+            field.setAccessible(true);
+
+            // Edit
+            field.set(null, value);
+
+            // Lock
+            field.setAccessible(false);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            Log.e(TAG, "Failed to spoof Build." + key, e);
+        }
+    }
+
+    private static void spoofBuildGms() {
+        // Set fingerprint for SafetyNet CTS profile
+        if (PRODUCT_STOCK_FINGERPRINT.length() > 0) {
+            setBuildField("FINGERPRINT", PRODUCT_STOCK_FINGERPRINT);
+        }
+
+        // Alter model name to avoid hardware attestation enforcement
+        setBuildField("MODEL", Build.MODEL + " ");
+        setBuildField("MANUFACTURER", "Google");
+    }
+
+    public static void initApplicationBeforeOnCreate(Application app) {
+        if (PACKAGE_GMS_CORE.equals(app.getPackageName()) &&
+                PROCESS_UNSTABLE.equals(Application.getProcessName())) {
+            sIsGms = true;
+            spoofBuildGms();
+        }
+    }
+
+    private static boolean isCallerSafetyNet() {
+        return Arrays.stream(Thread.currentThread().getStackTrace())
+                .anyMatch(elem -> elem.getClassName().contains("DroidGuard"));
+    }
+
+    public static void onEngineGetCertificateChain() {
+        // Check stack for SafetyNet
+        if (sIsGms && isCallerSafetyNet()) {
+            throw new UnsupportedOperationException();
+        }
+    }
+}
+
-- 
2.34.1

